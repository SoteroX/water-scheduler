{"version":3,"sources":["components/welcome/welcome.component.jsx","components/big-calendar/big.calendar.component.jsx","helpers/plant-helper.js","helpers/date-helpers.js","helpers/big-calendar-helper.js","components/big-calendar/big.calendar.container.jsx","components/list/list.component.jsx","helpers/list-helpers.js","components/list/list.container.jsx","App.js","serviceWorker.js","index.js"],"names":["Welcome","className","localizer","momentLocalizer","moment","BigCalendar","events","startAccessor","endAccessor","style","height","sortPlantsByWateringDate","plants","sortedObj","i","length","plant","water_after","push","extractNumberFromString","str","parseInt","replace","addDays","date","days","result","Date","setDate","getDate","subtractDays","createCalendarDateObject","sortedPlants","datesObj","dayNum","tempDate","endDate","val","dateObjStructure","month","getMonth","day","year","getFullYear","getDay","createCalendarEventArray","dates","day7Plants","day7Dates","day2Plants","day2Dates","day3Dates","day3Plants","day14Dates","day14Plants","combineDatesAndPlants","flat","arrayHolder","tempObj","id","title","start","end","k","uuidv4","name","BigCalendarContainer","useState","setEvents","useEffect","a","async","console","log","List","displayList","list","map","key","idx","newDate","toDateString","createDateArray","data","dataArray","includes","createDateObject","mapDatesToPlants","listArray","ListContainer","setList","dateArray","dateObject","App","openCalendar","setOpenCalendar","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d82ebd03.chunk.js","sourcesContent":["import React from \"react\";\r\n// Import styles\r\nimport \"./welcome.styles.css\";\r\n\r\nconst Welcome = () => {\r\n  return (\r\n    <div className=\"welcome-container\">\r\n      <h1>Welcome to Tandem Watering Scheduler</h1>\r\n      <p>\r\n        Tandem Watering Scheduler is an application that helps you keep track of\r\n        when your plants need watering\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Welcome;\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\r\n\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\n\r\nconst localizer = momentLocalizer(moment);\r\n\r\nconst BigCalendar = ({ events }) => {\r\n  return (\r\n    <Calendar\r\n      localizer={localizer}\r\n      events={events}\r\n      startAccessor=\"start\"\r\n      endAccessor=\"end\"\r\n      style={{ height: 500 }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default BigCalendar;\r\n","/**\r\n * @param {array} - array of objects holding plant values\r\n * @return {object}- returns an object of sorted plants\r\n *                   by watering date\r\n */\r\nexport const sortPlantsByWateringDate = plants => {\r\n  const sortedObj = {};\r\n  for (let i = 0; i < plants.length; i++) {\r\n    let plant = plants[i];\r\n    if (sortedObj[plant.water_after]) {\r\n      sortedObj[plant.water_after].push(plant);\r\n    } else {\r\n      sortedObj[plant.water_after] = [plant];\r\n    }\r\n  }\r\n  return sortedObj;\r\n};\r\n\r\nexport const extractNumberFromString = str => parseInt(str.replace(/\\D/g, \"\"));\r\n","export const addDays = (date, days) => {\r\n  var result = new Date(date);\r\n  result.setDate(result.getDate() + days);\r\n  return result;\r\n};\r\n\r\nexport const subtractDays = (date, days) => {\r\n  var result = new Date(date);\r\n  result.setDate(result.getDate() - days);\r\n  return result;\r\n};\r\n","import uuidv4 from \"uuid/v4\";\r\n// Import helpers\r\nimport { extractNumberFromString } from \"./plant-helper\";\r\nimport { addDays, subtractDays } from \"./date-helpers\";\r\n\r\nexport const createCalendarDateObject = sortedPlants => {\r\n  const datesObj = {};\r\n  let dayNum = 0;\r\n  let tempDate = null;\r\n  const endDate = new Date(\"03/09/2020\");\r\n\r\n  for (var val in sortedPlants) {\r\n    dayNum = extractNumberFromString(val);\r\n    tempDate = new Date(\"12/16/2019\");\r\n\r\n    // 12/16/2016 will be day 1 so we start i at 1\r\n    for (let i = 1; i <= 85; i += dayNum) {\r\n      if (i === 1) {\r\n        // sets up the date object on the first day\r\n        // it should only run 1 time\r\n        if (!datesObj[val]) {\r\n          let dateObjStructure = {\r\n            month: tempDate.getMonth(),\r\n            day: tempDate.getDate(),\r\n            year: tempDate.getFullYear()\r\n          };\r\n          datesObj[val] = [dateObjStructure];\r\n        }\r\n      } else {\r\n        if (datesObj[val]) {\r\n          tempDate = addDays(tempDate, dayNum);\r\n\r\n          // makes sure we dont go past the endDate\r\n          if (tempDate > endDate) {\r\n            break;\r\n          }\r\n\r\n          // check if the day is either Saturday or Sunday\r\n          // subtract a day if its Saturday\r\n          // add a day if its Sunday\r\n          if (tempDate.getDay() === 6) {\r\n            tempDate = subtractDays(tempDate, 1);\r\n          } else if (tempDate.getDay() === 0) {\r\n            tempDate = addDays(tempDate, 1);\r\n          }\r\n\r\n          let dateObjStructure = {\r\n            month: tempDate.getMonth(),\r\n            day: tempDate.getDate(),\r\n            year: tempDate.getFullYear()\r\n          };\r\n\r\n          datesObj[val].push(dateObjStructure);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return datesObj;\r\n};\r\n\r\nexport const createCalendarEventArray = (plants, dates) => {\r\n  const events = [];\r\n  const day7Plants = plants[\"7 days\"];\r\n  const day7Dates = dates[\"7 days\"];\r\n  const day2Plants = plants[\"2 days\"];\r\n  const day2Dates = dates[\"2 days\"];\r\n  const day3Dates = dates[\"3 days\"];\r\n  const day3Plants = plants[\"3 days\"];\r\n  const day14Dates = dates[\"14 days\"];\r\n  const day14Plants = plants[\"14 days\"];\r\n\r\n  events.push(combineDatesAndPlants(day7Dates, day7Plants));\r\n  events.push(combineDatesAndPlants(day2Dates, day2Plants));\r\n  events.push(combineDatesAndPlants(day3Dates, day3Plants));\r\n  events.push(combineDatesAndPlants(day14Dates, day14Plants));\r\n\r\n  return events.flat();\r\n};\r\n\r\nconst combineDatesAndPlants = (dates, plants) => {\r\n  const arrayHolder = [];\r\n  const tempObj = {\r\n    id: null,\r\n    title: null,\r\n    start: null,\r\n    end: null\r\n  };\r\n  for (let i = 0; i < dates.length; i++) {\r\n    for (let k = 0; k < plants.length; k++) {\r\n      tempObj.id = uuidv4();\r\n      tempObj.title = plants[k].name;\r\n      tempObj.start = new Date(dates[i].year, dates[i].month, dates[i].day);\r\n      tempObj.end = new Date(dates[i].year, dates[i].month, dates[i].day);\r\n      arrayHolder.push({ ...tempObj });\r\n    }\r\n  }\r\n  return arrayHolder;\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n// Import Component\r\nimport BigCalendar from \"./big.calendar.component\";\r\n// import helpers\r\nimport {\r\n  createCalendarDateObject,\r\n  createCalendarEventArray\r\n} from \"../../helpers/big-calendar-helper\";\r\n\r\nconst BigCalendarContainer = ({ sortedPlants }) => {\r\n  const [events, setEvents] = useState(null);\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        // create event data structure for BigCalendar\r\n        const dates = await createCalendarDateObject(sortedPlants);\r\n        setEvents(await createCalendarEventArray(sortedPlants, dates));\r\n      } catch (error) {\r\n        console.log(\"couldnt create calendar event structure:\", error);\r\n      }\r\n    })();\r\n  }, [sortedPlants]);\r\n  console.log(\"events:\", events);\r\n  return (\r\n    <div>\r\n      {events ? (\r\n        <BigCalendar events={events} />\r\n      ) : (\r\n        <div>Calendar component couldn't be render</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BigCalendarContainer;\r\n","import React from \"react\";\r\nimport uuidv4 from \"uuid/v4\";\r\n\r\nimport \"./list.styles.css\";\r\n\r\nconst List = ({ list }) => {\r\n  let displayList = list.map(plant => {\r\n    return (\r\n      <div key={plant.name}>\r\n        <h3 className=\"list-plant-title\">{plant.name}</h3>\r\n        <h5 className=\"list-plant-dates\">Every {plant.water_after}</h5>\r\n        <ul>\r\n          {plant.dates.map((val, idx) => {\r\n            let newDate = new Date(val.year, val.month, val.day);\r\n            return <li key={uuidv4()}>{newDate.toDateString()}</li>;\r\n          })}\r\n        </ul>\r\n      </div>\r\n    );\r\n  });\r\n  return (\r\n    <div className=\"list-section\">\r\n      <h1 className=\"list-component-title\">List Component</h1>\r\n      <div className=\"list-ui-container\">{displayList}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import { extractNumberFromString } from \"../helpers/plant-helper\";\r\nimport { addDays, subtractDays } from \"./date-helpers\";\r\n\r\nexport const createDateArray = data => {\r\n  let dataArray = [];\r\n  for (var date of data) {\r\n    if (!dataArray.includes(date[\"water_after\"])) {\r\n      dataArray.push(date[\"water_after\"]);\r\n    }\r\n  }\r\n  return dataArray;\r\n};\r\n\r\nexport const createDateObject = date => {\r\n  const datesObj = {};\r\n  let dayNum = 0;\r\n  let tempDate = null;\r\n  const endDate = new Date(\"03/09/2020\");\r\n\r\n  for (var val of date) {\r\n    dayNum = extractNumberFromString(val);\r\n    tempDate = new Date(\"12/16/2019\");\r\n\r\n    // 12/16/2016 will be day 1 so we start i at 1\r\n    for (let i = 1; i <= 85; i += dayNum) {\r\n      if (i === 1) {\r\n        // sets up the date object on the first day\r\n        // it should only run 1 time\r\n        if (!datesObj[val]) {\r\n          let dateObjStructure = {\r\n            month: tempDate.getMonth(),\r\n            day: tempDate.getDate(),\r\n            year: tempDate.getFullYear()\r\n          };\r\n          datesObj[val] = [dateObjStructure];\r\n        }\r\n      } else {\r\n        if (datesObj[val]) {\r\n          tempDate = addDays(tempDate, dayNum);\r\n\r\n          // makes sure we dont go past the endDate\r\n          if (tempDate > endDate) {\r\n            break;\r\n          }\r\n\r\n          // check if the day is either Saturday or Sunday\r\n          // subtract a day if its Saturday\r\n          // add a day if its Sunday\r\n          if (tempDate.getDay() === 6) {\r\n            tempDate = subtractDays(tempDate, 1);\r\n          } else if (tempDate.getDay() === 0) {\r\n            tempDate = addDays(tempDate, 1);\r\n          }\r\n\r\n          let dateObjStructure = {\r\n            month: tempDate.getMonth(),\r\n            day: tempDate.getDate(),\r\n            year: tempDate.getFullYear()\r\n          };\r\n\r\n          datesObj[val].push(dateObjStructure);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return datesObj;\r\n};\r\n\r\nexport const mapDatesToPlants = (dates, plants) => {\r\n  const listArray = [];\r\n  for (var plant of plants) {\r\n    if (dates[plant[\"water_after\"]]) {\r\n      listArray.push({ ...plant, dates: dates[plant[\"water_after\"]] });\r\n    }\r\n  }\r\n  return listArray;\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n// Import components\r\nimport List from \"./list.component\";\r\n// Import helpers\r\nimport {\r\n  createDateArray,\r\n  createDateObject,\r\n  mapDatesToPlants\r\n} from \"../../helpers/list-helpers\";\r\n\r\nconst ListContainer = ({ plants }) => {\r\n  const [list, setList] = useState(null);\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        const dateArray = await createDateArray(plants);\r\n        const dateObject = await createDateObject(dateArray);\r\n        setList(await mapDatesToPlants(dateObject, plants));\r\n      } catch (err) {\r\n        console.log(\"found error when creating list:\", err);\r\n      }\r\n    })();\r\n  }, [plants]);\r\n  return (\r\n    <div>\r\n      {list ? (\r\n        <List list={list} />\r\n      ) : (\r\n        <div>List couldn't be displayed, please check for errors</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ListContainer;\r\n","import React, { useState } from \"react\";\r\n// Import Components\r\nimport Welcome from \"./components/welcome/welcome.component\";\r\nimport BigCalendarContainer from \"./components/big-calendar/big.calendar.container\";\r\nimport ListContainer from \"./components/list/list.container\";\r\n// Import data\r\nimport plants from \"./data/data.json\";\r\n// import helpers\r\nimport { sortPlantsByWateringDate } from \"./helpers/plant-helper\";\r\n// Import styles\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [openCalendar, setOpenCalendar] = useState(true);\r\n  const [sortedPlants] = useState(sortPlantsByWateringDate(plants));\r\n\r\n  const handleListButton = () => {\r\n    if (openCalendar) {\r\n      setOpenCalendar(false);\r\n    }\r\n  };\r\n\r\n  const handleCalendarButton = () => {\r\n    if (!openCalendar) {\r\n      setOpenCalendar(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Welcome />\r\n      <div className=\"app-selection-container\">\r\n        <h4>Select which VIEW you would like to use</h4>\r\n        <div className=\"app-button-container\">\r\n          <button\r\n            className={\r\n              \"app-button-styles \" + (openCalendar === false ? \"active\" : null)\r\n            }\r\n            onClick={handleListButton}\r\n          >\r\n            List\r\n          </button>\r\n          <button\r\n            className={\r\n              \"app-button-styles \" + (openCalendar === true ? \"active\" : null)\r\n            }\r\n            onClick={handleCalendarButton}\r\n          >\r\n            Calendar\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {openCalendar ? (\r\n        <BigCalendarContainer sortedPlants={sortedPlants} />\r\n      ) : (\r\n        <ListContainer plants={plants} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}